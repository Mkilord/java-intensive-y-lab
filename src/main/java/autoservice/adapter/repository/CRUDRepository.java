package autoservice.adapter.repository;

import java.util.Optional;
import java.util.function.Predicate;
import java.util.stream.Stream;


public interface CRUDRepository<T> {

    /**
     * Создает новый объект в хранилище.
     *
     * @param object объект, который требуется создать
     * @return объект, обернутый в {@link Optional}, который может содержать результат создания или пустое значение,
     *         если создание не удалось
     */
    Optional<T> create(T object);

    /**
     * Удаляет указанный объект из хранилища.
     *
     * @param object объект, который требуется удалить
     * @return количество удаленных объектов (обычно 1, если объект был найден и удален, иначе 0)
     */
    int delete(T object);

    /**
     * Обновляет существующий объект в хранилище.
     *
     * @param object объект с обновленными данными
     * @return количество обновленных объектов (обычно 1, если объект был найден и обновлен, иначе 0)
     */
    int update(T object);

    /**
     * Проверяет, существует ли объект с указанным идентификатором.
     *
     * @param id идентификатор объекта, который требуется проверить
     * @return {@code true}, если объект с данным идентификатором существует, {@code false} в противном случае
     */
    boolean existsById(int id);

    /**
     * Находит объект по его идентификатору.
     *
     * @param id идентификатор объекта, который требуется найти
     * @return объект, обернутый в {@link Optional}, который может содержать найденный объект или пустое значение,
     *         если объект с данным идентификатором не найден
     */
    Optional<T> findById(int id);

    /**
     * Находит все объекты в хранилище.
     *
     * @return поток всех объектов, хранящихся в хранилище
     */
    Stream<T> findAll();

    /**
     * Находит все объекты, которые соответствуют указанному фильтру.
     *
     * @param predicate предикат, который определяет критерии фильтрации
     * @return поток объектов, которые соответствуют заданному фильтру
     */
    Stream<T> findByFilter(Predicate<T> predicate);
}
